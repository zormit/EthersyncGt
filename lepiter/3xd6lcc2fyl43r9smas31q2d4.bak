{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "pictureSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:17:46.330204+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:19:03.984657+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "zYSakqTaDQC5iDP7BJ9bug=="
				},
				"url" : "attachments/b16k3xuovp1wknxvuh5xu58m7/proxy-image.jpeg",
				"caption" : "",
				"previewHeight" : 300
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:17:12.63386+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:17:13.695141+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Ck+YkKTaDQC5cyCeBJ9bug=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "attachments/9k716omakkex0mqbmvjhk0k2f/proxy-image.jpeg"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:19:10.77489+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-28T01:19:10.77489+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "9amykKTaDQC5fMmCBJ9bug=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : ""
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-22T14:43:01.081579+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T20:48:54.638566+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GN5WHzfaDQCNlas4BkDBJw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Step 1: Follow an 11 year old [tutorial](https://samadhiweb.com/blog/2013.07.27.unixdomainsockets.html). Also later I found [this repo](https://github.com/charcodelimit/unixdomainsockets-smalltalk), which has probably been contributing the code we're using here."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-22T13:29:45.658972+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T18:09:09.058486+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "OQNaGTbaDQCTBMpEAztUQg=="
				},
				"code" : "\" It seems this is needed to 'register' the service? It'll fail without. Kind of strange, that it's stateful like that.\"\rNetNameResolver\r\tprimGetAddressInfoHost: ''\r\tservice: '/tmp/ethersync'\r\tflags: 0\r\tfamily: 1\r\ttype: 0\r\tprotocol: 0.\rs := NetNameResolver primGetAddressInfoSize.\rsa := SocketAddress new: s withAll: 0.\r\" Same here, without this, it'll fail to connect: \"\rNetNameResolver primGetAddressInfoResult: sa.\rsock := Socket newIPC.\rsock\r\tifNotNil: [ sock connectTo: sa.\r\t\tsock sendData: 'Hello, from Smalltalk!'.\r\t\tTranscript show: sock receiveData; cr.\r\t\tsock closeAndDestroy ]"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:53:11.588331+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:56:34.049046+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "9ZxQf1/aDQCsX80RA5M1Ig=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I'm wondering if I can simplify this. The stuff with the NetNameResolver seems to be quite a lot that's happening and I'm not sure *why* it's all needed."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:56:35.370214+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:57:24.356722+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0qKOi1/aDQCxOFfYA5M1Ig=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Ok, I realized, that this does all the preparatory steps needed:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:53:52.218201+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T18:17:31.474587+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wCXVgV/aDQCwkJV9A5M1Ig=="
				},
				"code" : "sa := NetNameResolver addressForSocketPath: '/tmp/ethersync'.\rsock := Socket newIPC.\rsock\r\tifNotNil: [ sock connectTo: sa.\r\t\tsock sendData: 'Hello, from Smalltalk!'.\r\t\tTranscript show: sock receiveData; cr.\r\t\tsock closeAndDestroy ]."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:58:55.972377+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:09:48.446815+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Sw/wk1/aDQC13CtCA5M1Ig=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Or we can go a level higher, use Zinc in combination with streams. I first tried this, but I think it doesn't really make sense, as we don't \"speak\" HTTP (the empty URL in the end is a bit weird):"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T14:59:07.670498+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:11:03.622925+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "nJKilF/aDQC2jrD+A5M1Ig=="
				},
				"code" : "ZnUnixSocketClient new unixSocket: (FileLocator root / 'tmp' / 'ethersync'); newConnectionTo: ''."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:09:54.996076+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:45:43.007316+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "KPs3u1/aDQC+SNkBA5M1Ig=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So, one level lower again, (ab?)using the `ZnNetworkingUtils` in combination with streams:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:10:23.030182+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:42:51.410372+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "m7fjvF/aDQC/tM7yA5M1Ig=="
				},
				"code" : "stream := ZnNetworkingUtils socketStreamToUnixSocketFile: (FileLocator root / 'tmp' / 'ethersync').\r[[stream nextPutAll: 'Hello from SMALLtok\\n'; flush.\rresult := stream upToEnd. \"Give us all data until the socket is closed.\"\rTranscript show: result; cr.]\r\tensure: [stream close]]\r\t\ton: ConnectionTimedOut\r\t\tdo: [:ex | Transcript show: ex asString;cr. ex resume]\r"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:57:58.825991+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T20:35:37.399323+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "0rsbZ2DaDQCEATlWDI3Fqw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Binding from Pharo natively"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T15:58:30.574024+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T17:05:41.178506+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "BisAaWDaDQCEO3oUDI3Fqw=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "I still don't know how to bind/accept a socket. Let's see... I realize, when I bind a new socket, I can't just get a SocketAddress from the NetNameResolver, because it doesn't exist yet."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T17:05:49.565188+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T18:13:00.087753+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fka+WWHaDQCL+TZCCNTooA=="
				},
				"code" : "sa := NetNameResolver addressForSocketPath: '/tmp/ethersynk'."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T17:06:01.679151+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T19:47:10.568958+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "GiF3WmHaDQCMOcGoCNTooA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "So how do I create an \"unbound\" socket address? I couldn't figure it out! A hack is to a) manually replace bytes from an existing one. We just have to be quite sure that the name is as long as the previous one:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T19:42:47.044569+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T19:46:16.802196+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "NfzoqHfaDQCwwjRdCvKtTQ=="
				},
				"code" : "sa := NetNameResolver addressForSocketPath: '/tmp/ethersync'.\rnewSocketName := '/tmp/ethersock'.\rsa\r\treplaceFrom: 11\r\tto: 11 + newSocketName size - 1\r\twith: newSocketName\r\tstartingAt: 1"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T19:46:27.731404+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T20:20:17.787191+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "wGIQtnfaDQC1rCQQCvKtTQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Evolving from this hack, here's another one. In German we say \"Von hinten durch die Brust ins Auge\":\n- make sure the (new) socket exists, s.t. we can resolve it to our address.\n    - (This has so be done through netcat, because it needs to be a socket, as far as I understand.) => wrong. interestingly the resolver works just with any file. What's the difference, even, given that the `file` command can tell a difference?\n- then unlink (delete) it, s.t. the socket bind can do its thing\n=> lol"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-24T17:39:52.30318+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:45:03.76824+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "fPZ/02HaDQCNyp6RCNTooA=="
				},
				"code" : "socketFile := FileLocator root / 'tmp' / 'ethersync'.\r\"GtShellScriptProcess new script: ('nc -lU ', socketFile fullName); execute; stop.\"\rsocketFile exists ifFalse: [ socketFile ensureCreateFile ].\rsocketAddress := NetNameResolver addressForSocketPath: socketFile fullName.\rsocketFile delete.\rsocketAddress"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T20:14:54.999427+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T20:44:21.172639+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "gj/TG3jaDQCsajRTAxl/oQ=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Ok, let's use this newly very complicatedly acquired SocketAddress for profit. We can bind a socket and then...?? how to listen?? Dang. There's no listen implementation for AF_UNIX, at least. Maybe a way forward is with the generic `primSocket: socketID listenWithBacklog: backlogSize`."
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-22T13:18:35.480051+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-25T21:59:42.259014+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "oORn8TXaDQCNNvUFAztUQg=="
				},
				"code" : "sock := Socket newIPC.\rsock primSocket: sock socketHandle bindTo: socketAddress.\rsock primSocket: sock socketHandle listenWithBacklog: 20.\rclient := sock waitForAcceptFor: 60.\rstream := ZnNetworkingUtils socketStreamOn: client.\r[ [ stream\r\tnextPutAll: 'Hello from SMALLtok\\n';\r\tflush.\rresult := stream upToEnd.\t\"Give us all data until the socket is closed.\"\rTranscript\r\tshow: result;\r\tcr ] ensure: [ stream close ] ]\r\ton: ConnectionTimedOut\r\tdo: [ :ex | \r\t\tTranscript\r\t\t\tshow: ex asString;\r\t\t\tcr.\r\t\tex resume ].\rsock closeAndDestroy."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:58:58.221249+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:59:10.564908+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "6J41oqLaDQCinn+HAuPn/A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Turning it into a useful class"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:59:11.957113+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:59:27.193823+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "lz4Ho6LaDQCjR0UnAuPn/A=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Looking at existing examples"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T22:58:38.288312+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2024-07-27T23:38:55.881355+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "W38FoaLaDQCilf85AuPn/A=="
				},
				"code" : "EthersyncSocketTest new runServer.\rTCPSocketEchoTest new clientSend: 'Hello @ ', Time now asString.\rTCPSocketEchoTest new clientSend: #quit."
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-07-22T13:31:18.471031+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2024-07-24T15:58:15.390462+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Socket Explorations"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "785b66ed-35da-0d00-8d0f-5942033b5442"
	}
}